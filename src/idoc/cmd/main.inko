import idoc.cmd.html
import std.fs.path (Path)
import std.io (Write)
import std.optparse (Help, Options)

let VERSION = '0.1.0'

fn usage(options: ref Options, output: mut Write) {
  let help = Help
    .new('idoc')
    .usage('[OPTIONS] [ARGS]')
    .section('Commands')
    .line('html    Generate documentation as a set of HTML files')
    .section('Options')
    .options(options)
    .to_string

  let _ = output.write_string(help)
}

fn pub run(
  arguments: Array[String],
  working_directory: ref Path,
  output: mut Write,
) -> Result[Nil, String] {
  let opts = Options.new

  opts.stop_at_first_non_option = true
  opts.flag('h', 'help', 'Show this help message')
  opts.flag('v', 'version', 'Show the version')

  let matches = try opts.parse(arguments).map_error(fn (e) { e.to_string })

  if matches.contains?('help') or matches.remaining.empty? {
    usage(opts, output)
    return Result.Ok(nil)
  }

  if matches.contains?('version') {
    let _ = output.print('idoc ${VERSION}')

    return Result.Ok(nil)
  }

  let remaining = match matches {
    case { @remaining = v } -> v
  }

  match remaining.remove_at(0) {
    case 'html' -> html.run(remaining, working_directory, output)
    case cmd -> Result.Error("the command '${cmd}' is unrecognized")
  }
}
