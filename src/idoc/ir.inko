# An intermediate representation of Inko's documentation files.
import builder.html
import idoc.fs (read_source_code)
import idoc.markdown (Markdown)
import std.clone (Clone)
import std.cmp (Compare, Equal, Ordering)
import std.fmt (Format, Formatter)
import std.fs.file (ReadOnlyFile)
import std.fs.path (Path)
import std.io (Read)
import std.json (Error, ErrorKind, PullParser)
import std.sync (Channel)

let META = '$meta.json'

type Range {
  let mut @start: Int
  let mut @end: Int

  fn static new(start: Int, end: Int) -> Range {
    Range(start: start, end: end)
  }
}

impl Clone for Range {
  fn pub clone -> Range {
    Range(start: @start, end: @end)
  }
}

impl Equal for Range {
  fn pub ==(other: ref Range) -> Bool {
    @start == other.start and @end == other.end
  }
}

impl Format for Range {
  fn pub fmt(formatter: mut Formatter) {
    @start.fmt(formatter)
    formatter.write(' to ')
    @end.fmt(formatter)
  }
}

# Parses a stream of bytes into a `Range`.
fn parse_range[T: mut + Read](
  parser: mut PullParser[T],
  range: mut Range,
) -> Result[Nil, Error] {
  try parser.object(fn (o) {
    o.int('start', fn (v) { range.start = v })
    o.int('end', fn (v) { range.end = v })
  })

  Result.Ok(nil)
}

# A type describing a symbol, such as a type or constant.
trait Symbol {
  # Returns the name of the symbol.
  fn name -> String

  # Returns the summary of the symbol.
  fn summary -> Markdown

  # Returns `true` if the symbol is public.
  fn public? -> Bool

  # Returns a type describing the value/borrow semantics of the symbol.
  fn value_semantics -> ValueSemantics
}

type enum ValueSemantics {
  case Regular
  case Atomic
  case Value
}

# A type describing the source location of a symbol.
type Location {
  # The lines the symbol covers.
  let mut @lines: Range

  # The columns the symbol covers.
  #
  # The range is a range of extended grapheme clusters, not bytes.
  let mut @columns: Range

  fn static default -> Location {
    Location(Range.new(1, 1), Range.new(1, 1))
  }

  fn static parse[T: mut + Read](
    parser: mut PullParser[T],
    location: mut Location,
  ) -> Result[Nil, Error] {
    try parser.object(fn (o) {
      o.key('lines', fn (p) { parse_range(p, location.lines) })
      o.key('columns', fn (p) { parse_range(p, location.columns) })
    })

    Result.Ok(nil)
  }
}

impl Clone for Location {
  fn pub clone -> Location {
    Location(lines: @lines.clone, columns: @columns.clone)
  }
}

# A type describing a single module and its contents.
type Module {
  # The fully qualified name of the module (e.g. `std.string`).
  let mut @name: String

  # The file path to the source code of the module.
  let mut @file: Path

  # The documentation of the module.
  let mut @documentation: Markdown

  # The constants defined in this module.
  let mut @constants: Array[Constant]

  # The module methods defined in this module.
  let mut @methods: Array[Method]

  # The types defined in this module.
  let mut @types: Array[Type]

  # The traits defined in this module.
  let mut @traits: Array[Trait]

  fn static parse_all(
    directory: ref Path,
  ) -> Result[Array[uni Module], String] {
    let chan = Channel.new
    let mut pending = try directory
      .list
      .then(fn (iter) {
        iter.try_reduce(0, fn (sum, res) {
          match res {
            case
              Ok({ @path = p, @type = File })
            if p.extension.or('') == 'json' and p.tail.starts_with?('$').false?
            -> {
              Parser().parse(recover p.clone, recover chan.clone)
              Result.Ok(sum + 1)
            }
            case Ok(_) -> Result.Ok(sum)
            case Error(e) -> Result.Error(e)
          }
        })
      })
      .map_error(fn (e) { 'failed to get the JSON files to process: ${e}' })

    let modules = []

    while pending > 0 {
      let mod = recover {
        match chan.receive {
          case Ok(v) -> v
          case Error((p, e)) -> throw 'failed to parse the JSON file ${p}: ${e}'
        }
      }

      if mod.symbols? { modules.push(mod) }

      pending -= 1
    }

    Result.Ok(modules)
  }

  fn static parse_file(path: Path) -> Result[Module, Error] {
    let mod = Module(
      name: '',
      file: ''.to_path,
      documentation: Markdown.new,
      constants: [],
      methods: [],
      types: [],
      traits: [],
    )

    let file = try ReadOnlyFile.new(path).map_error(fn (e) {
      Error(kind: ErrorKind.Read(e), offset: 0)
    })

    let parser = PullParser.new(file)

    try parser.object(fn (o) {
      o.string('name', fn (v) { mod.name = v })
      o.string('file', fn (v) { mod.file = v.to_path })
      o.key('documentation', fn (p) {
        Markdown.parse(p).map(fn (v) { mod.documentation = v })
      })
      o.values('constants', fn (p) {
        Constant.parse(p).map(fn (v) { mod.constants.push(v) })
      })
      o.values('methods', fn (p) {
        Method.parse(p).map(fn (v) { mod.methods.push(v) })
      })
      o.values('types', fn (p) {
        Type.parse(p).map(fn (v) { mod.types.push(v) })
      })
      o.values('traits', fn (p) {
        Trait.parse(p).map(fn (v) { mod.traits.push(v) })
      })
    })

    mod.constants.sort
    mod.methods.sort
    mod.traits.sort
    mod.types.sort
    Result.Ok(mod)
  }

  fn symbols? -> Bool {
    @constants.size > 0
      or @methods.size > 0
      or @types.size > 0
      or @traits.size > 0
  }

  fn unique_constants -> Array[uni Constant] {
    @constants.iter.map(fn (v) { recover v.clone }).to_array
  }

  fn unique_methods -> Array[uni Method] {
    @methods.iter.map(fn (v) { recover v.clone }).to_array
  }

  fn unique_types -> Array[uni Type] {
    @types.iter.map(fn (v) { recover v.clone }).to_array
  }

  fn unique_traits -> Array[uni Trait] {
    @traits.iter.map(fn (v) { recover v.clone }).to_array
  }
}

# A type describing the documentation metadata file.
type Metadata {
  # The README of the project, if any was found.
  let mut @readme: Markdown

  fn static parse(directory: ref Path) -> Result[Metadata, Error] {
    let path = directory.join(META)
    let file = try ReadOnlyFile.new(path).map_error(fn (e) {
      Error(kind: ErrorKind.Read(e), offset: 0)
    })
    let parser = PullParser.new(file)
    let meta = Metadata(readme: Markdown.new)

    try parser.object(fn (o) {
      o.key('readme', fn (p) {
        Markdown.parse(p).map(fn (v) { meta.readme = v })
      })
    })

    Result.Ok(meta)
  }
}

# A type describing a constant.
type Constant {
  # The name of the constant (e.g. `NUMBER`).
  let mut @name: String

  # The source location at which the symbol is defined.
  let mut @location: Location

  # A flag indicating if the symbol is public or not.
  let mut @public: Bool

  # A `String` describing the type (signature) of the symbol.
  let mut @type: String

  # The documentation of the symbol.
  let mut @documentation: Markdown

  fn static parse[T: mut + Read](
    parser: mut PullParser[T],
  ) -> Result[Constant, Error] {
    let val = Constant(
      name: '',
      location: Location.default,
      public: false,
      type: '',
      documentation: Markdown.new,
    )

    try parser.object(fn (o) {
      o.string('name', fn (v) { val.name = v })
      o.key('location', fn (p) { Location.parse(p, val.location) })
      o.bool('public', fn (v) { val.public = v })
      o.string('type', fn (v) { val.type = v })
      o.key('documentation', fn (p) {
        Markdown.parse(p).map(fn (v) { val.documentation = v })
      })
    })

    Result.Ok(val)
  }
}

impl Compare for Constant {
  fn pub cmp(other: ref Constant) -> Ordering {
    @name.cmp(other.name)
  }
}

impl Clone for Constant {
  fn pub clone -> Constant {
    Constant(
      name: @name,
      location: @location.clone,
      public: @public,
      type: @type,
      documentation: @documentation.clone,
    )
  }
}

impl Symbol for Constant {
  fn name -> String {
    @name
  }

  fn summary -> Markdown {
    @documentation.summary
  }

  fn public? -> Bool {
    @public
  }

  fn value_semantics -> ValueSemantics {
    ValueSemantics.Regular
  }
}

# A type describing a field defined in a type.
type Field {
  # The name of the field, minus the `@` symbol.
  let mut @name: String

  # The source location at which the symbol is defined.
  let mut @location: Location

  # A flag indicating if the symbol is public or not.
  let mut @public: Bool

  # A `String` describing the type (signature) of the symbol.
  let mut @type: String

  # The documentation of the symbol.
  let mut @documentation: Markdown

  fn static parse[T: mut + Read](
    parser: mut PullParser[T],
  ) -> Result[Field, Error] {
    let val = Field(
      name: '',
      location: Location.default,
      public: false,
      type: '',
      documentation: Markdown.new,
    )

    try parser.object(fn (o) {
      o.string('name', fn (v) { val.name = v })
      o.key('location', fn (p) { Location.parse(p, val.location) })
      o.bool('public', fn (v) { val.public = v })
      o.string('type', fn (v) { val.type = v })
      o.key('documentation', fn (p) {
        Markdown.parse(p).map(fn (v) { val.documentation = v })
      })
    })

    Result.Ok(val)
  }
}

impl Clone for Field {
  fn pub clone -> Field {
    Field(
      name: @name,
      location: @location.clone,
      public: @public,
      type: @type,
      documentation: @documentation.clone,
    )
  }
}

# A type describing a constructor of an enum.
type Constructor {
  # The name of the constructor.
  let mut @name: String

  # The source location at which the symbol is defined.
  let mut @location: Location

  # A `String` describing the type (signature) of the symbol.
  let mut @type: String

  # The documentation of the symbol.
  let mut @documentation: Markdown

  fn static parse[T: mut + Read](
    parser: mut PullParser[T],
  ) -> Result[Constructor, Error] {
    let val = Constructor(
      name: '',
      location: Location.default,
      type: '',
      documentation: Markdown.new,
    )

    try parser.object(fn (o) {
      o.string('name', fn (v) { val.name = v })
      o.key('location', fn (p) { Location.parse(p, val.location) })
      o.string('type', fn (v) { val.type = v })
      o.key('documentation', fn (p) {
        Markdown.parse(p).map(fn (v) { val.documentation = v })
      })
    })

    Result.Ok(val)
  }
}

impl Clone for Constructor {
  fn pub clone -> Constructor {
    Constructor(
      name: @name,
      location: @location.clone,
      type: @type,
      documentation: @documentation.clone,
    )
  }
}

# A type describing a single method.
type Method {
  # The name of the method.
  let mut @name: String

  # The file in which the method is defined.
  #
  # This may differ from the type a method is defined for, as types can be
  # reopened in different modules.
  let mut @file: Path

  # The source location at which the symbol is defined.
  let mut @location: Location

  # A flag indicating if the symbol is public or not.
  let mut @public: Bool

  # A `String` describing the type (signature) of the symbol.
  let mut @type: String

  # The documentation of the symbol.
  let mut @documentation: Markdown

  fn static parse[T: mut + Read](
    parser: mut PullParser[T],
  ) -> Result[Method, Error] {
    let val = Method(
      name: '',
      file: ''.to_path,
      location: Location.default,
      public: false,
      type: '',
      documentation: Markdown.new,
    )

    try parser.object(fn (o) {
      o.string('name', fn (v) { val.name = v })
      o.string('file', fn (v) { val.file = v.to_path })
      o.key('location', fn (p) { Location.parse(p, val.location) })
      o.bool('public', fn (v) { val.public = v })
      o.string('type', fn (v) { val.type = v })
      o.key('documentation', fn (p) {
        Markdown.parse(p).map(fn (v) { val.documentation = v })
      })
    })

    Result.Ok(val)
  }
}

impl Clone for Method {
  fn pub clone -> Method {
    Method(
      name: @name,
      file: @file.clone,
      location: @location.clone,
      public: @public,
      type: @type,
      documentation: @documentation.clone,
    )
  }
}

impl Compare for Method {
  fn pub cmp(other: ref Method) -> Ordering {
    @name.cmp(other.name)
  }
}

impl Symbol for Method {
  fn name -> String {
    @name
  }

  fn summary -> Markdown {
    @documentation.summary
  }

  fn public? -> Bool {
    @public
  }

  fn value_semantics -> ValueSemantics {
    ValueSemantics.Regular
  }
}

# A reference to a `Method`, along with its source code.
type MethodWithSource {
  let @node: ref Method
  let @source: ByteArray

  fn static array_of(
    nodes: ref Array[Method],
  ) -> Result[Array[MethodWithSource], String] {
    nodes.iter.try_reduce([], fn (ary, m) {
      ary.push(try MethodWithSource.from(m))
      Result.Ok(ary)
    })
  }

  fn static from(node: ref Method) -> Result[MethodWithSource, String] {
    let src = try read_source_code(node.file, node.location.lines, dedent: 2)

    Result.Ok(MethodWithSource(node, src))
  }

  fn documentation -> html.Document {
    @node.documentation.to_html(increment_headings: 3)
  }
}

# A type describing the kind of a type (e.g. is it a regular type or an
# enum?).
type enum TypeKind {
  case Regular
  case Enum
  case Async
  case Extern
  case ValueType
  case Atomic

  fn static from(value: Int) -> TypeKind {
    match value {
      case 1 -> TypeKind.Enum
      case 2 -> TypeKind.Async
      case 3 -> TypeKind.Extern
      case 4 -> TypeKind.ValueType
      case 5 -> TypeKind.Atomic
      case _ -> TypeKind.Regular
    }
  }

  fn enum? -> Bool {
    match self {
      case Enum -> true
      case _ -> false
    }
  }
}

impl Clone for TypeKind {
  fn pub clone -> TypeKind {
    match self {
      case Regular -> TypeKind.Regular
      case Enum -> TypeKind.Enum
      case Async -> TypeKind.Async
      case Extern -> TypeKind.Extern
      case ValueType -> TypeKind.ValueType
      case Atomic -> TypeKind.Atomic
    }
  }
}

type Implementation {
  # The fully qualified name of the module in which the trait is defined.
  let mut @module: String

  # The name of the symbol the implementation is for.
  let mut @name: String

  # The type signature of the implemented trait.
  let mut @type: String

  # A boolean indicating if the implemented trait is public or not.
  let mut @public: Bool

  fn static parse[T: mut + Read](
    parser: mut PullParser[T],
  ) -> Result[Implementation, Error] {
    let imp = Implementation(module: '', name: '', type: '', public: false)

    try parser.object(fn (o) {
      o.string('module', fn (v) { imp.module = v })
      o.string('name', fn (v) { imp.name = v })
      o.string('type', fn (v) { imp.type = v })
      o.bool('public', fn (v) { imp.public = v })
    })

    Result.Ok(imp)
  }
}

impl Clone for Implementation {
  fn pub clone -> Implementation {
    Implementation(module: @module, name: @name, type: @type, public: @public)
  }
}

impl Compare for Implementation {
  fn pub cmp(other: ref Implementation) -> Ordering {
    match @module.cmp(other.module) {
      case Equal -> @name.cmp(other.name)
      case ord -> ord
    }
  }
}

# A type describing a type.
type Type {
  # The name of the type.
  let mut @name: String

  # The source location at which the symbol is defined.
  let mut @location: Location

  # What kind of type we're dealing with.
  let mut @kind: TypeKind

  # A flag indicating if the symbol is public or not.
  let mut @public: Bool

  # A `String` describing the type (signature) of the symbol.
  let mut @type: String

  # The documentation of the type.
  let mut @documentation: Markdown

  # The constructors defined for this type, if it's an enum type.
  let @constructors: Array[Constructor]

  # The fields defined for this type.
  let @fields: Array[Field]

  # The static methods defined for this type.
  let @static_methods: Array[Method]

  # The instance methods defined for this type.
  let @instance_methods: Array[Method]

  # The traits implemented by this type.
  let @implemented_traits: Array[Implementation]

  fn static parse[T: mut + Read](
    parser: mut PullParser[T],
  ) -> Result[Type, Error] {
    let val = Type(
      name: '',
      location: Location.default,
      kind: TypeKind.Regular,
      public: false,
      type: '',
      documentation: Markdown.new,
      constructors: [],
      fields: [],
      static_methods: [],
      instance_methods: [],
      implemented_traits: [],
    )

    try parser.object(fn (o) {
      o.string('name', fn (v) { val.name = v })
      o.key('location', fn (p) { Location.parse(p, val.location) })
      o.int('kind', fn (v) { val.kind = TypeKind.from(v) })
      o.bool('public', fn (v) { val.public = v })
      o.string('type', fn (v) { val.type = v })
      o.key('documentation', fn (p) {
        Markdown.parse(p).map(fn (v) { val.documentation = v })
      })
      o.values('constructors', fn (p) {
        Constructor.parse(p).map(fn (v) { val.constructors.push(v) })
      })
      o.values('fields', fn (p) {
        Field.parse(p).map(fn (v) { val.fields.push(v) })
      })
      o.values('static_methods', fn (p) {
        Method.parse(p).map(fn (v) { val.static_methods.push(v) })
      })
      o.values('instance_methods', fn (p) {
        Method.parse(p).map(fn (v) { val.instance_methods.push(v) })
      })
      o.values('implemented_traits', fn (p) {
        Implementation.parse(p).map(fn (v) { val.implemented_traits.push(v) })
      })
    })

    val.instance_methods.sort
    val.static_methods.sort
    val.implemented_traits.sort
    Result.Ok(val)
  }
}

impl Compare for Type {
  fn pub cmp(other: ref Type) -> Ordering {
    @name.cmp(other.name)
  }
}

impl Clone for Type {
  fn pub clone -> Type {
    Type(
      name: @name,
      location: @location.clone,
      kind: @kind.clone,
      public: @public,
      type: @type,
      documentation: @documentation.clone,
      constructors: @constructors.clone,
      fields: @fields.clone,
      static_methods: @static_methods.clone,
      instance_methods: @instance_methods.clone,
      implemented_traits: @implemented_traits.clone,
    )
  }
}

impl Symbol for Type {
  fn name -> String {
    @name
  }

  fn summary -> Markdown {
    @documentation.summary
  }

  fn public? -> Bool {
    @public
  }

  fn value_semantics -> ValueSemantics {
    match @kind {
      case Atomic or Async -> ValueSemantics.Atomic
      case ValueType or Extern -> ValueSemantics.Value
      case _ -> ValueSemantics.Regular
    }
  }
}

# A type describing a trait.
type Trait {
  # The name of the trait.
  let mut @name: String

  # The source location at which the symbol is defined.
  let mut @location: Location

  # A flag indicating if the symbol is public or not.
  let mut @public: Bool

  # A `String` describing the type (signature) of the symbol.
  let mut @type: String

  # The documentation of the symbol.
  let mut @documentation: Markdown

  # The required methods defined for this trait.
  let @required_methods: Array[Method]

  # The default methods defined for this trait.
  let @default_methods: Array[Method]

  # The implementations of this trait.
  let @implementations: Array[Implementation]

  fn static parse[T: mut + Read](
    parser: mut PullParser[T],
  ) -> Result[Trait, Error] {
    let val = Trait(
      name: '',
      location: Location.default,
      public: false,
      type: '',
      documentation: Markdown.new,
      required_methods: [],
      default_methods: [],
      implementations: [],
    )

    try parser.object(fn (o) {
      o.string('name', fn (v) { val.name = v })
      o.key('location', fn (p) { Location.parse(p, val.location) })
      o.bool('public', fn (v) { val.public = v })
      o.string('type', fn (v) { val.type = v })
      o.key('documentation', fn (p) {
        Markdown.parse(p).map(fn (v) { val.documentation = v })
      })
      o.values('required_methods', fn (p) {
        Method.parse(p).map(fn (v) { val.required_methods.push(v) })
      })
      o.values('default_methods', fn (p) {
        Method.parse(p).map(fn (v) { val.default_methods.push(v) })
      })
      o.values('implementations', fn (p) {
        Implementation.parse(p).map(fn (v) { val.implementations.push(v) })
      })
    })

    val.required_methods.sort
    val.default_methods.sort
    val.implementations.sort
    Result.Ok(val)
  }
}

impl Compare for Trait {
  fn pub cmp(other: ref Trait) -> Ordering {
    @name.cmp(other.name)
  }
}

impl Clone for Trait {
  fn pub clone -> Trait {
    Trait(
      name: @name,
      location: @location.clone,
      public: @public,
      type: @type,
      documentation: @documentation.clone,
      required_methods: @required_methods.clone,
      default_methods: @default_methods.clone,
      implementations: @implementations.clone,
    )
  }
}

impl Symbol for Trait {
  fn name -> String {
    @name
  }

  fn summary -> Markdown {
    @documentation.summary
  }

  fn public? -> Bool {
    @public
  }

  fn value_semantics -> ValueSemantics {
    ValueSemantics.Regular
  }
}

# A process that parses a documentation JSON file into a `Module`.
type async Parser {
  fn async parse(
    input: uni Path,
    output: uni Channel[uni Result[Module, (Path, Error)]],
  ) {
    let res = recover {
      let input = recover input

      match Module.parse_file(input.clone) {
        case Ok(v) -> Result.Ok(v)
        case Error(e) -> Result.Error((input, e))
      }
    }

    output.send(res)
  }
}
