import builder.html
import idoc.html (
  atomic, container, head, header, highlight_inko, implementations, link_to,
  methods, page_title, private, search_results, sidebar, symbol_info,
  value_type, with_table_of_contents,
)
import idoc.ir
import idoc.module_name (ModuleName)
import wobsite (Files, UpdateAssetLinks)
import wobsite.url (file_url)

type Page {
  let @module: ModuleName
  let @source: String
  let @type: ir.Type
  let @modules: Array[ModuleName]

  fn static new(
    module: ModuleName,
    node: ir.Type,
    modules: Array[ModuleName],
  ) -> Page {
    let src = module.symbol_source_uri(node.name)

    Page(module: module, source: src, type: node, modules: modules)
  }

  fn signature_html -> html.Document {
    highlight_inko(@type.type.to_byte_array)
  }

  fn documentation_html -> html.Document {
    @type.documentation.to_html(increment_headings: 1)
  }

  fn to_html(files: ref Files) -> Result[String, String] {
    let static_methods = try ir.MethodWithSource.array_of(@type.static_methods)
    let instance_methods = try ir.MethodWithSource.array_of(
      @type.instance_methods,
    )
    let current_url = file_url(files.source, files.source.join(@source))
    let result = html.Document.html('en', fn (h) {
      h.add(head(current_url, title: '${@module.name}.${@type.name}'))

      h.body.with(fn (body) {
        header(body, current_url)

        container(body, fn (div) {
          sidebar(div, @module.uri, current_url, @modules)
          search_results(div)

          with_table_of_contents(div, fn (content) {
            content.header.with(fn (h) {
              page_title(h, fn (t) {
                link_to(t, current_url, @module.link, text: @module.name)
                t.text('.')
                t.text(@type.name)
              })

              if @type.public.false? { private(h) }

              match @type.kind {
                case Atomic or Async -> atomic(h)
                case ValueType or Extern -> value_type(h)
                case _ -> {}
              }
            })

            content.append(signature_html)
            content.append(documentation_html)

            if @type.fields.size > 0 and @type.kind.enum?.false? {
              content.h2.text('Fields')

              @type.fields.iter.each(fn (sym) {
                content.header.with(fn (h) {
                  h.h3.attr('id', 'field.${sym.name}').text(sym.name)

                  if sym.public.false? { private(h) }
                })
                symbol_info(content, fn (c) {
                  c.append(highlight_inko(sym.type.to_byte_array))
                  c.append(sym.documentation.to_html(increment_headings: 2))
                })
              })
            }

            if @type.constructors.size > 0 {
              content.h2.text('Constructors')

              @type.constructors.iter.each(fn (sym) {
                content.header.with(fn (h) {
                  h.h3.attr('id', 'constructor.${sym.name}').text(sym.name)
                })
                symbol_info(content, fn (c) {
                  c.append(highlight_inko(sym.type.to_byte_array))
                  c.append(sym.documentation.to_html(increment_headings: 2))
                })
              })
            }

            if @type.static_methods.size > 0 {
              content.h2.text('Static methods')
              methods(content, static_methods)
            }

            if @type.instance_methods.size > 0 {
              content.h2.text('Instance methods')
              methods(content, instance_methods)
            }

            if @type.implemented_traits.size > 0 {
              content.h2.text('Implemented traits')
              implementations(
                content,
                current_url,
                @modules,
                @type.implemented_traits,
              )
            }
          })
        })
      })
    })

    UpdateAssetLinks.new(files, current_url).run(result)
    Result.Ok(result.to_string)
  }
}
